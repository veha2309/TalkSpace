generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String    @unique
  hashedPassword String?
  image          String?
  emailVerified  DateTime?

  conversations ConversationUser[]
  messages      Message[]
  accounts      Account[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  Session       Session[]

  friendsInitiated Friendship[] @relation("FriendshipUser1")
  friendsReceived  Friendship[] @relation("FriendshipUser2")
  seenMessageIds   String[]     @db.ObjectId
  seenMessages     Message[]    @relation("Seen", fields: [seenMessageIds], references: [id])
}

model Friendship {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId1   String   @db.ObjectId // ID of the first user
  userId2   String   @db.ObjectId // ID of the second user
  createdAt DateTime @default(now()) // Timestamp when the friendship was created

  user1 User @relation("FriendshipUser1", fields: [userId1], references: [id] , onDelete : Cascade)
  user2 User @relation("FriendshipUser2", fields: [userId2], references: [id] , onDelete : Cascade)

  @@unique([userId1, userId2]) // Ensure each friendship is unique
  @@unique([userId2, userId1]) // Bi-directional friendship constraint
}

model Conversation {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  name         String? // Optional name for group conversations
  isGroup      Boolean            @default(false)
  participants ConversationUser[] // Link to participants in the conversation 
  messages     Message[] // Link to the messages within the conversation
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  deletedBy String[] @db.ObjectId // Array of user IDs who have deleted the conversation
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id])
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id] , onDelete : Cascade)
  createdAt      DateTime     @default(now())
  seenIds        String[]     @db.ObjectId
  seen           User[]       @relation("Seen", fields: [seenIds], references: [id]) // Array of user IDs who have seen the message

  image String? // Optional message image
}

model ConversationUser {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId // User ID for the participant
  conversationId String       @db.ObjectId // Conversation ID
  user           User         @relation(fields: [userId], references: [id]) // Relation to the User model
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade) // Relation to the Conversation model
  createdAt      DateTime     @default(now()) // Timestamp when the user was added to the conversation
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId // User ID associated with the account
  type              String // Account type (e.g., "google", "facebook", etc.)
  provider          String // Authentication provider (e.g., "google")
  providerAccountId String // Provider account ID (e.g., google account ID)
  refresh_token     String? @db.String // Refresh token for OAuth
  access_token      String? @db.String // Access token for OAuth
  expires_at        Int? // Expiration time for OAuth tokens
  token_type        String? // Type of token (e.g., "bearer")
  scope             String? // Scope of OAuth access
  id_token          String? @db.String // ID token for OAuth
  session_state     String? // Session state for OAuth
  user              User    @relation(fields: [userId], references: [id]) // Relation to the User model

  @@unique([provider, providerAccountId]) // Ensures unique provider accounts
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique // Unique session token for the session
  userId       String   @db.ObjectId // User ID associated with the session
  user         User     @relation(fields: [userId], references: [id]) // Relation to the User model
  expires      DateTime @default(now()) // Session expiration timestamp
}
